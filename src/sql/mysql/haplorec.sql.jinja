CREATE TABLE haplotype (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    haplotype_name varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    primary key (gene_name, haplotype_name)
) {{SQL_ENGINE}};

CREATE TABLE haplotype_snps (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    haplotype_name varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    snp_id varchar({{SQL_SNP_ID_LENGTH}}),
    allele varchar({{SQL_ALLELE_LENGTH}}),
    foreign key (gene_name, haplotype_name) references haplotype (gene_name, haplotype_name),
    primary key (gene_name, haplotype_name, snp_id)
) {{SQL_ENGINE}};

CREATE TABLE phenotype (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    phenotype_name varchar({{SQL_PHENOTYPE_NAME_LENGTH}}),
    primary key (gene_name, phenotype_name)
) {{SQL_ENGINE}};

CREATE TABLE recommendation (
    drug_name varchar({{SQL_DRUG_NAME_LENGTH}}),
    -- a set of tuples of (gene_name, phenotype_name), represented as a string with a tuple 
    -- delimiter and set element delimiter
    gene_phen_set varchar({{SQL_MYSQL_GENE_PHEN_SET_LENGTH}}),
    implications varchar({{SQL_IMPLICATIONS_LENGTH}}),
    recommendation varchar({{SQL_RECOMMENDATION_LENGTH}}),
    classification varchar({{SQL_CLASSIFICATION_LENGTH}}),
    diplotype_egs varchar({{SQL_DIPLOTYPE_EGS_LENGH}}),
    primary key (drug_name, gene_phen_set)
) {{SQL_ENGINE}};

-- a mapping from (gene_name, phenotype_name) to the gene_phen_set's that contain them (this is a 
-- kludge to workaround the fact that we don't have a proper set datatype in MySQL).
--
-- Usage: 
-- def gene_phenotype->recommendation(input_gene_phenotype = create table(gene_name, phenotype_name), engine = (MEMORY|MyISAM)):
--     create temporary table input_gene_phen_set (gene_phen_set, index(gene_phen_set)) ENGINE = $engine;
--     for s in cursor: select candidate.gene_phen_set from candidate join input_gene_phenotype using (gene_name):
--         if either of the sets (input table) or s contain eachother:
--             prepared stmt: insert into input_gene_phen_set values s
--     return cursor: select recommendation.* from recommendation join input_gene_phen_set using (gene_phen_set)
CREATE TABLE candidate (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    -- TODO: InnoDB has a limit of 767 bytes and MyISAM has a limit of 1000 bytes on key length; now 
    -- that we know how to do set-containment queries on 2 relations, rework schema to not use a 
    -- delimited string kludge
    gene_phen_set varchar({{SQL_MYSQL_GENE_PHEN_SET_LENGTH}}),
    index gene_name_idx (gene_name),
    primary key (gene_name, gene_phen_set)
) {{SQL_ENGINE}};

-- Usage:
-- def snp->gene_haplotype(input_variants, engine = (MEMORY|MyISAM)):
--     create temporary table input_gene_haplotype (gene_name, haplotype_name) ENGINE = $engine
--         select distinct gene_name, haplotype_name from gene_haplotype_variant ghv
--             # refer to src/sql/mysql/subset_query.sql 
--             where $either_set_contains(
--                     select * from input_variants, 
--                     select * from gene_haplotype_variant ghv 
--                         where gene_name = ghv.gene_name and 
--                         haplotype_name = ghv.haplotype_name, 
--                     columns=[snp_id, allele]
--                   )
--     return table: input_gene_haplotype
CREATE TABLE gene_haplotype_variant (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    haplotype_name varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    snp_id varchar({{SQL_SNP_ID_LENGTH}}),
    allele varchar({{SQL_ALLELE_LENGTH}}),
    index gene_name_haplotype_name_idx (gene_name, haplotype_name),
    index snp_id_allele_idx (snp_id, allele),
    primary key (gene_name, haplotype_name, snp_id, allele)
) {{SQL_ENGINE}};

-- a mapping from genotypes (defined as 2 haplotypes that span the same genetic region of a gene) to 
-- phenotypes. This mapping is defined externally, since it varies based on a paticular gene.  For 
-- example, the CYP2D6 gene (http://www.pharmgkb.org/gene/PA128#tabview=tab0&subtab=31) defines a 
-- genotype as "An individual carrying more than two copies of functional alleles", or with an 
-- activity score ">2.0"
CREATE TABLE genotype_phenotype (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    -- haplotype_name 1 and 2 must be stored in sorted order
    haplotype_name1 varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    haplotype_name2 varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    phenotype_name varchar({{SQL_PHENOTYPE_NAME_LENGTH}}),
    index phenotype_idx(gene_name, phenotype_name),
    primary key (gene_name, haplotype_name1, haplotype_name2),
    foreign key (gene_name, haplotype_name1) references haplotype (gene_name, haplotype_name),
    foreign key (gene_name, haplotype_name2) references haplotype (gene_name, haplotype_name),
    foreign key (gene_name, phenotype_name) references phenotype (gene_name, phenotype_name)
) {{SQL_ENGINE}};
