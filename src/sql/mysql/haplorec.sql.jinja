-- -------------------------------------------------------------------------------------------------
-- Define PharmGKB data tables.  
-- These tables are used for storing data scraped from PharmGKB's website.
-- -------------------------------------------------------------------------------------------------

-- May be useful later to provide haplotype-specific data
-- CREATE TABLE haplotype (
--     gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
--     haplotype_name varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
--     primary key (gene_name, haplotype_name)
-- ) {{SQL_ENGINE}};

-- May be useful later to provide phenotype-specific data
-- CREATE TABLE phenotype (
--     gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
--     phenotype_name varchar({{SQL_PHENOTYPE_NAME_LENGTH}}),
--     primary key (gene_name, phenotype_name)
-- ) {{SQL_ENGINE}};

-- Stores data for a "Lookup your guideline" drug recommmendation, as found in the drug sections of 
-- gene-page's on PharmGKB.  Currently, a new drug_recommendation is inserted for each (gene_name, 
-- haplotype_name1, haplotype_name2), even though their may be identical recommendations for 
-- different genotypes of the same gene.
CREATE TABLE drug_recommendation (
    id bigint not null auto_increment,
    drug_name varchar({{SQL_DRUG_NAME_LENGTH}}),
    implications LONGTEXT,
    recommendation LONGTEXT,
    classification LONGTEXT,
    diplotype_egs LONGTEXT,
    primary key (id)
) {{SQL_ENGINE}};

-- Defines the mapping { (GeneName, PhenotypeName) } -> DrugRecommendation.
-- That is, the set of gene phenotypes that map to particular drug recommendations.
CREATE TABLE gene_phenotype_drug_recommendation (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    phenotype_name varchar({{SQL_PHENOTYPE_NAME_LENGTH}}),
    drug_recommendation_id bigint,
    index gene_name_phenotype_name_idx (gene_name, phenotype_name),
    primary key (gene_name, phenotype_name, drug_recommendation_id),
    foreign key (drug_recommendation_id) references drug_recommendation(id)
) {{SQL_ENGINE}};

-- Defines the mapping (GeneName, HaplotypeName) -> { (SnpId, Allele) }.
-- That is, the snps belonging to a particular gene's haplotype.
CREATE TABLE gene_haplotype_variant (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    haplotype_name varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    snp_id varchar({{SQL_SNP_ID_LENGTH}}),
    allele varchar({{SQL_ALLELE_LENGTH}}),
    index gene_name_haplotype_name_idx (gene_name, haplotype_name),
    index snp_id_allele_idx (snp_id, allele),
    index gene_name_snp_id_idx (gene_name, snp_id),
    index haplotype_name_idx (haplotype_name),
    primary key (gene_name, haplotype_name, snp_id, allele)
) {{SQL_ENGINE}};

-- Genes and their associated Snps.
-- gene_haplotype_variant is denormalized in terms of the snp's associated with a gene 
-- (they are the same for each haplotype of that gene).
CREATE ALGORITHM=MERGE VIEW gene_snp ( 
    gene_name,
    snp_id
) as 
select distinct gene_name, snp_id
from gene_haplotype_variant;

-- Genes and their associated haplotyoes.
-- gene_haplotype_variant is denormalized in terms of the haplotype_name's associated with a gene.
CREATE ALGORITHM=MERGE VIEW gene_haplotype ( 
    gene_name,
    haplotype_name 
) as 
select distinct gene_name, haplotype_name
from gene_haplotype_variant;

-- Defines the mapping (GeneName, HaplotypeName, HaplotypeName) -> (GeneName, PhenotypeName).
-- That is, a mapping from genotypes (defined as 2 haplotypes for a gene) to phenotypes. 
--
-- This mapping is defined externally, but will typically be obtained by results published by the 
-- Clinical Pharmacogenetics Implementation Consortium (CPIC), which are published in an english 
-- prose (i.e. they need to be converted into actual genotypes) by mapping genotypes to phenotype 
-- descriptions. 
--
-- e.g. 
-- - CYP2D6 gene: http://www.pharmgkb.org/gene/PA128#tabview=tab0&subtab=31
-- - genotype: "An individual carrying more than two copies of functional alleles"
-- - phenotype: "Ultrarapid metabolizer"
CREATE TABLE genotype_phenotype (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    -- haplotype_name 1 and 2 must be stored in sorted order
    haplotype_name1 varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    haplotype_name2 varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    phenotype_name varchar({{SQL_PHENOTYPE_NAME_LENGTH}}),
    index gene_name_phenotype_name_idx (gene_name, phenotype_name),
    primary key (gene_name, haplotype_name1, haplotype_name2)
) {{SQL_ENGINE}};

-- Defines the mapping { (GeneName, HaplotypeName, HaplotypeName) } -> DrugRecommendation.
-- That is, a mapping from a set of genotypes to a particular drug recommendations
--
-- Justification:
-- There are cases where CPIC results publish dosing recommendatons based (solely?) on 
-- genotypes as opposed to phenotypes.
-- e.g. 
-- warfarin dosing recommendations are based on VKORC1 and CYP2C9 genotypes 
-- (http://www.pharmgkb.org/drug/PA451906; refer to "Table 1: Recommended daily warfarin doses")
CREATE TABLE genotype_drug_recommendation (
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    haplotype_name1 varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    haplotype_name2 varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    drug_recommendation_id bigint,
    index gene_name_haplotype_name1_haplotype_name2_idx (gene_name, haplotype_name1, haplotype_name2),
    primary key (gene_name, haplotype_name1, haplotype_name2, drug_recommendation_id),
    foreign key (drug_recommendation_id) references drug_recommendation(id)
) {{SQL_ENGINE}};

CREATE TABLE job (
    id bigint not null auto_increment,
    job_name varchar({{SQL_JOB_NAME_LENGTH}}),
    unique (job_name),
    primary key (id)
) {{SQL_ENGINE}};

{# Define the things that job_patient_* tables have in common -#}
{%- macro job_patient_table(table_suffix, table_prefix='') -%}
CREATE TABLE {{table_prefix}}job_patient_{{table_suffix}} (
    id bigint not null auto_increment,
    job_id bigint not null,
    patient_id varchar({{SQL_PATIENT_ID_LENGTH}}),
    {{ caller() }}
    foreign key (job_id) references job(id),
    primary key (id)
) {{SQL_ENGINE}};
{%- endmacro -%}

{# Define fields needed to determine which heterozygote combination this result comes from -#}
{%- macro het_combo_fields() -%}
    het_combo integer,
    het_combos integer,
{%- endmacro -%}

{%- macro physical_chromosome_field() -%}
    physical_chromosome enum('A', 'B'),
{%- endmacro -%}

{# Define fields needed to determine which physical chromosome this record comes from (and which heterozygote combination) -#}
{%- macro physical_chromosome_fields() -%}
    {{ physical_chromosome_field() }}
    {{ het_combo_fields() }}
{%- endmacro -%}

-- -------------------------------------------------------------------------------------------------
-- Define job_patient_* tables.  
-- These tables are used for storing the results of a stage in the pipeline, and correspond to a node 
-- the pipeline graph.  The contents of these tables are described in the pipeline stage definitions 
-- in Pipeline.groovy.
-- -------------------------------------------------------------------------------------------------

{% call job_patient_table('genotype_drug_recommendation') -%}
    {{ het_combo_fields() }}
    drug_recommendation_id bigint,
    unique (job_id, patient_id, drug_recommendation_id, het_combo),
    foreign key (drug_recommendation_id) references drug_recommendation(id),
{%- endcall %}

{% call job_patient_table('phenotype_drug_recommendation') -%}
    {{ het_combo_fields() }}
    drug_recommendation_id bigint,
    unique (job_id, patient_id, drug_recommendation_id, het_combo),
    foreign key (drug_recommendation_id) references drug_recommendation(id),
{%- endcall %}

{% call job_patient_table('gene_haplotype') -%}
    {{ physical_chromosome_fields() }}
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    haplotype_name varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    index gene_name_haplotype_name_idx (gene_name, haplotype_name),
{%- endcall %}

{% call job_patient_table('gene_phenotype') -%}
    {{ het_combo_fields() }}
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    phenotype_name varchar({{SQL_PHENOTYPE_NAME_LENGTH}}),
    index gene_name_phenotype_name_idx (gene_name, phenotype_name),
{%- endcall %}

{% call job_patient_table('genotype') -%}
    {{ het_combo_fields() }}
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    haplotype_name1 varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    haplotype_name2 varchar({{SQL_HAPLOTYPE_NAME_LENGTH}}),
    index gene_name_haplotype_name1_haplotype_name2_idx (gene_name, haplotype_name1, haplotype_name2),
{%- endcall %}

{% call job_patient_table('variant') -%}
    {{ physical_chromosome_field() }}
    snp_id varchar({{SQL_SNP_ID_LENGTH}}),
    allele varchar({{SQL_ALLELE_LENGTH}}),
    -- zygosity is one of 'het' (for a heterozygous call) or 'hom' (for a homozygous call)
    zygosity char(3), 
    index snp_id_allele_idx (snp_id, allele),
    index job_pat_phys_zyg (job_id, patient_id, physical_chromosome, zygosity),
{%- endcall %}

{% call job_patient_table('het_variant') -%}
    {{ physical_chromosome_fields() }}
    snp_id varchar({{SQL_SNP_ID_LENGTH}}),
    allele varchar({{SQL_ALLELE_LENGTH}}),
    index snp_id_allele_idx (snp_id, allele),
    index het_combo_phys_idx (het_combo, physical_chromosome),
{%- endcall %}

{% call job_patient_table('novel_haplotype') -%}
    {{ physical_chromosome_fields() }}
    gene_name varchar({{SQL_GENE_NAME_LENGTH}}),
    index job_pat_phys_idx (job_id, patient_id, physical_chromosome),
{%- endcall %}
